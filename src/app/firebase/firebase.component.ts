import {Component, OnInit} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {map} from "rxjs/operators";
import {PostModel} from "./post.model";

@Component({
  selector: 'app-firebase',
  templateUrl: './firebase.component.html',
  styleUrls: ['./firebase.component.css']
})
export class FirebaseComponent implements OnInit {
  loadedPosts = [];
  private url = 'https://angular-app-5208d.firebaseio.com/';

  constructor(private http: HttpClient) {
  }

  ngOnInit() {
    this.getPosts();
  }

  onCreatePost(postData: PostModel) {
    // have to subscribe, if not angular will not send any (POST too) request
    this.http
      // specify type of object
      .post<PostModel>(this.url + 'posts.json', postData)
      .subscribe(responseData => {
        console.log(responseData);
      });
  }

  onGetPosts() {
    this.getPosts();
  }

  getPosts() {
    // have to subscribe, if not angular will not send any (GET too) request
    // pipe will transform data to useful,
    // for example by converting json name (firebase generated ID) to id
    this.http
    // response is of type PostModel,
      .get<PostModel>(this.url + 'posts.json')
      .pipe(
        // if not specified in get, type can be specify as below:
        // map((response: { [key: string]: PostModel }) => {
        // where [key: string] is angular notation for any string,
        // which will be generated from firebase as ID (key)
        map(response => {
          const postsArray: PostModel[] = [];
          for (const key in response) {
            // response must have property of key to be valid
            if (response.hasOwnProperty(key)) {
              //  ... will alter json adding id,
              //  which will be identical as generated by firebase (key in map)
              postsArray.push({...response[key], id: key})
            }
          }
          return postsArray;
        }))
      .subscribe((posts) => {
        this.loadedPosts = posts;
      });
  }

  onClearPosts() {

  }
}
